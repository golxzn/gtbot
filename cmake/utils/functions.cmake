include(CMakeParseArguments)

function(get_cpm)
	set(version VERSION RENAME)
	cmake_parse_arguments(GET_CPM "" "${version}" "" ${ARGN})
	if(NOT GET_CPM_VERSION)
		message(FATAL_ERROR "[get_cpm]: Version was not found! Set VERSION parameter explicitly!")
	endif()

	if(CPM_SOURCE_CACHE)
		set(CPM_DOWNLOAD_LOCATION "${CPM_SOURCE_CACHE}/cpm/CPM_${GET_CPM_VERSION}.cmake")
	elseif(DEFINED ENV{CPM_SOURCE_CACHE})
		set(CPM_DOWNLOAD_LOCATION "$ENV{CPM_SOURCE_CACHE}/cpm/CPM_${GET_CPM_VERSION}.cmake")
	else()
		set(CPM_DOWNLOAD_LOCATION "${CMAKE_BINARY_DIR}/tools/CPM_${GET_CPM_VERSION}.cmake")
	endif()

	if(NOT (EXISTS ${CPM_DOWNLOAD_LOCATION}))
		message(STATUS "Downloading CPM.cmake to ${CPM_DOWNLOAD_LOCATION}")
		file(DOWNLOAD
			https://github.com/TheLartians/CPM.cmake/releases/download/v${GET_CPM_VERSION}/CPM.cmake
			${CPM_DOWNLOAD_LOCATION}
		)
	endif()

	include(${CPM_DOWNLOAD_LOCATION})
endfunction()

function(get_flatc)
	set(version VERSION RENAME)
	cmake_parse_arguments(GET_FLATC "" "${version}" "" ${ARGN})
	if(NOT GET_FLATC_VERSION)
		message(FATAL_ERROR "[get_flatc]: Version was not found! Set VERSION parameter explicitly!")
	endif()
	if (PLATFORM MATCHES win OR PLATFORM MATCHES uwp)
		set(flatc_platform Windows)
	elseif(PLATFORM MATCHES ios)
		set(flatc_platform Mac)
	elseif(PLATFORM MATCHES linux)
		set(flatc_platform Linux)
	else()
		message(FATAL_ERROR "[get_flatc]: Unknown platform")
	endif()

	set(archive_name ${flatc_platform}.flatc.binary.zip)
	set(url https://github.com/google/flatbuffers/releases/download/v${GET_FLATC_VERSION}/${archive_name})
	set(download_location "${CMAKE_BINARY_DIR}/tools")
	if (NOT EXISTS ${FLATC})
		message(STATUS "Downloading flatc to ${download_location}")
		file(DOWNLOAD ${url} ${download_location}/${archive_name})
		file(ARCHIVE_EXTRACT INPUT ${download_location}/${archive_name} DESTINATION ${download_location})
		file(REMOVE ${download_location}/${archive_name})
	endif()

	list(APPEND CMAKE_MODULE_PATH ${download_location})
	find_program(flatc_file flatc ${download_location})
	set(FLATC ${flatc_file} CACHE PATH "flatbuffers compiler")
endfunction()

function(get_ccache)
	set(version VERSION RENAME)
	cmake_parse_arguments(GET_CCACHE "" "${version}" "" ${ARGN})
	if(NOT GET_CCACHE_VERSION)
		message(FATAL_ERROR "[get_ccache]: Version was not found! Set VERSION parameter explicitly!")
	endif()
	if (PLATFORM MATCHES win OR PLATFORM MATCHES uwp)
		set(ccache_platform windows)
		set(ccache_archive_ext zip)
	elseif(PLATFORM MATCHES linux)
		set(ccache_platform linux)
		set(ccache_archive_ext tar.xz)
	else()
		message(FATAL_ERROR "[get_ccache]: The ${PLATFORM} isn't supported")
	endif()

	set(name ccache-${GET_CCACHE_VERSION}-${ccache_platform}-${ARCHITECTURE})
	set(archive_name ${name}.${ccache_archive_ext})
	set(url https://github.com/ccache/ccache/releases/download/v${GET_CCACHE_VERSION}/${archive_name})
	set(download_location "${CMAKE_BINARY_DIR}/tools")
	if (NOT EXISTS ${CCACHE})
		message(STATUS "Downloading ccache to ${download_location}")
		file(DOWNLOAD ${url} ${download_location}/${archive_name})
		file(ARCHIVE_EXTRACT INPUT ${download_location}/${archive_name} DESTINATION ${download_location})
		file(REMOVE ${download_location}/${archive_name})
	endif()

	list(APPEND CMAKE_MODULE_PATH ${download_location}/${name})
	find_program(ccache_file ccache ${download_location}/${name})

	if(ccache_file)
		set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${ccache_file})
		set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ${ccache_file})
		set(CCACHE ${ccache_file} CACHE PATH "A fast compiler cache")
	endif()
endfunction()


function(flatc_generate_files output_directory search_directory)
	if(NOT FLATC)
		return()
	endif()

	file(GLOB_RECURSE framebuffers_schemes CONFIGURE_DEPENDS ${search_directory}/*.fbs)

	set(generated_headers "")
	foreach(scheme IN LISTS framebuffers_schemes)
		message(VERBOSE "Making command for ${scheme}")
		get_filename_component(scheme_name ${scheme} NAME)
		get_filename_component(scheme_name_we ${scheme} NAME_WE)
		get_filename_component(scheme_path ${scheme} PATH)
		string(REPLACE ${search_directory}/ "" scheme_short_path ${scheme_path})

		set(generated_path ${output_directory}/${scheme_short_path})
		if(NOT EXISTS ${generated_path})
			make_directory(${generated_path})
		endif()

		execute_process(
			COMMAND ${FLATC} --cpp ${scheme} ${ARGN}
			WORKING_DIRECTORY ${generated_path}
			RESULT_VARIABLE result
		)
		if(${result} EQUAL 0)
			message(STATUS "[flatc]: Generated file: ${scheme_name}")
		else()
			message(FATAL_ERROR "[flatc]: Cannot generate file ${scheme}")
		endif()
	endforeach()
endfunction()
